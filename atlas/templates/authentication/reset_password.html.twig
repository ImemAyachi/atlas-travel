{% extends 'base.html.twig' %}

{% block title %}Reset Password | Atlas Travel{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('templates/security/forgot_password.css') }}">
    <style>
        :root {
            --primary-color: #3a7bd5;
            --error-color: #dc3545;
            --success-color: #28a745;
            --border-color: #e1e1e1;
            --focus-color: #2563eb;
            --light-bg: #f8fafc;
            --light-text: #64748b;
        }

        .forgot-password-container {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: var(--light-bg);
            padding: 20px;
        }

        .forgot-password-card {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            border: 1px solid var(--border-color);
            width: 100%;
            max-width: 440px;
        }

        .card-header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .card-header h2 {
            color: #1a365d;
            font-size: 1.875rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .subtitle {
            color: var(--light-text);
            font-size: 1rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: #4a5568;
            font-weight: 500;
            font-size: 0.875rem;
        }

        .input-container {
            position: relative;
            display: flex;
            align-items: center;
            margin-bottom: 0.25rem;
        }

        .input-icon {
            position: absolute;
            left: 1rem;
            color: var(--light-text);
            pointer-events: none;
        }

        .input-container input {
            width: 100%;
            padding: 0.75rem 1rem 0.75rem 2.5rem;
            border: 2px solid var(--border-color);
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background-color: var(--light-bg);
        }

        .input-container input:focus {
            border-color: var(--focus-color);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
            outline: none;
            background-color: white;
        }

        .error-message {
            background-color: #fef2f2;
            color: var(--error-color);
            padding: 0.75rem;
            border-radius: 6px;
            margin-bottom: 1rem;
            border: 1px solid #fee2e2;
            font-size: 0.875rem;
        }

        .password-requirements {
            background-color: #f8fafc;
            padding: 1rem;
            border-radius: 6px;
            margin: 1rem 0;
            border: 1px solid #e2e8f0;
        }

        .password-requirements ul {
            list-style: none;
            padding-left: 0;
            margin-top: 0.5rem;
            margin-bottom: 0;
        }

        .password-requirements li {
            display: flex;
            align-items: center;
            margin-bottom: 0.375rem;
            color: var(--light-text);
            font-size: 0.875rem;
        }

        .password-requirements li::before {
            content: "•";
            color: var(--primary-color);
            font-weight: bold;
            margin-right: 0.5rem;
        }

        .form-actions {
            margin-top: 1.5rem;
        }

        .reset-btn {
            width: 100%;
            padding: 0.75rem 1.5rem;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .reset-btn:hover {
            background-color: #2563eb;
            transform: translateY(-1px);
        }

        .reset-btn:active {
            transform: translateY(0);
        }

        .action-links {
            text-align: center;
            margin-top: 1.5rem;
        }

        .return-link {
            color: var(--primary-color);
            text-decoration: none;
            font-size: 0.875rem;
            font-weight: 500;
            transition: color 0.3s ease;
        }

        .return-link:hover {
            color: #2563eb;
            text-decoration: underline;
        }

        @media (max-width: 480px) {
            .forgot-password-card {
                padding: 1.5rem;
            }

            .card-header h2 {
                font-size: 1.5rem;
            }
        }

        .invalid-feedback {
            color: var(--error-color);
            font-size: 0.875rem;
            margin-top: 0.25rem;
            margin-bottom: 0.5rem;
            padding-left: 0.5rem;
            display: block;
        }

        .is-invalid {
            border-color: var(--error-color) !important;
        }

        .is-invalid:focus {
            box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1) !important;
        }
    </style>
{% endblock %}

{% block body %}
<div class="forgot-password-container">
    <div class="forgot-password-card">
        <div class="card-header">
            <h2>Reset Your Password</h2>
            <p class="subtitle">Please enter your new password below</p>
        </div>
        
        {% if error %}
            <div class="error-message">
                <svg xmlns="http://www.w3.org/2000/svg" class="icon" viewBox="0 0 20 20" fill="currentColor" style="width: 20px; height: 20px; display: inline; margin-right: 8px; vertical-align: text-bottom;">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
                </svg>
                {{ error }}
            </div>
        {% endif %}

        <form method="post" class="forgot-password-form" id="resetPasswordForm" novalidate>
            <div class="form-group">
                <label for="password">New Password</label>
                <div class="input-container">
                    <svg class="input-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                        <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
                    </svg>
                    <input type="password" 
                           id="password" 
                           name="password" 
                           autofocus 
                           placeholder="Enter your new password"
                           class="{% if errors.password is defined %}is-invalid{% endif %}">
                </div>
                {% if errors.password is defined %}
                    <div class="invalid-feedback">{{ errors.password }}</div>
                {% endif %}
            </div>

            <div class="form-group">
                <label for="confirm_password">Confirm Password</label>
                <div class="input-container">
                    <svg class="input-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                        <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
                    </svg>
                    <input type="password" 
                           id="confirm_password" 
                           name="confirm_password"
                           placeholder="Confirm your new password"
                           class="{% if errors.confirm_password is defined %}is-invalid{% endif %}">
                </div>
                {% if errors.confirm_password is defined %}
                    <div class="invalid-feedback">{{ errors.confirm_password }}</div>
                {% endif %}
            </div>

            <div class="password-requirements">
                <strong>Password requirements:</strong>
                <ul>
                    <li id="length">At least 8 characters long</li>
                    <li id="uppercase">Contains at least one uppercase letter</li>
                    <li id="number">Contains at least one number</li>
                    <li id="special">Contains at least one special character</li>
                </ul>
            </div>

            <div class="form-actions">
                <button type="submit" class="reset-btn">
                    Reset Password
                </button>
            </div>
            
            <div class="action-links">
                <a href="{{ path('app_login') }}" class="return-link">← Back to login</a>
            </div>
        </form>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
document.getElementById('resetPasswordForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const password = document.getElementById('password').value;
    const confirmPassword = document.getElementById('confirm_password').value;
    let isValid = true;
    
    // Reset previous error states
    document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
    document.querySelectorAll('.invalid-feedback').forEach(el => el.remove());
    
    // Validate password
    if (!password) {
        showError('password', 'Password is required');
        isValid = false;
    } else if (password.length < 8) {
        showError('password', 'Password must be at least 8 characters long');
        isValid = false;
    } else if (!/[A-Z]/.test(password)) {
        showError('password', 'Password must contain at least one uppercase letter');
        isValid = false;
    } else if (!/[0-9]/.test(password)) {
        showError('password', 'Password must contain at least one number');
        isValid = false;
    } else if (!/[!@#$%^&*]/.test(password)) {
        showError('password', 'Password must contain at least one special character');
        isValid = false;
    }
    
    // Validate confirm password
    if (!confirmPassword) {
        showError('confirm_password', 'Please confirm your password');
        isValid = false;
    } else if (password !== confirmPassword) {
        showError('confirm_password', 'Passwords do not match');
        isValid = false;
    }
    
    if (isValid) {
        this.submit();
    }
});

function showError(fieldId, message) {
    const field = document.getElementById(fieldId);
    field.classList.add('is-invalid');
    
    const feedback = document.createElement('div');
    feedback.className = 'invalid-feedback';
    feedback.textContent = message;
    
    // Insert error message after the input-container
    const inputContainer = field.closest('.input-container');
    inputContainer.insertAdjacentElement('afterend', feedback);
}

// Real-time password requirements check
document.getElementById('password').addEventListener('input', function(e) {
    const password = e.target.value;
    
    // Check length
    document.getElementById('length').style.color = 
        password.length >= 8 ? 'var(--success-color)' : 'var(--light-text)';
    
    // Check uppercase
    document.getElementById('uppercase').style.color = 
        /[A-Z]/.test(password) ? 'var(--success-color)' : 'var(--light-text)';
    
    // Check number
    document.getElementById('number').style.color = 
        /[0-9]/.test(password) ? 'var(--success-color)' : 'var(--light-text)';
    
    // Check special character
    document.getElementById('special').style.color = 
        /[!@#$%^&*]/.test(password) ? 'var(--success-color)' : 'var(--light-text)';
});
</script>
{% endblock %} 